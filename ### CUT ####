### CUT ####

    # Training data is all data before next_date
    # Testing data all data during next_date
    train_date_filter = feature_df['next_date'] < next_date
    test_date_filter = feature_df['next_date'] == next_date
    
    X_train = feature_df.loc[train_date_filter].drop(extra_columns, axis=1).values
    y_train = feature_df.loc[train_date_filter, 'label']

    X_test = feature_df.loc[test_date_filter].drop(extra_columns, axis=1).values
    y_test = feature_df.loc[test_date_filter, 'label']
    
    meta_train = []
    meta_test = []
    predictions = {}
    for name, (model, parameters) in models.items():
        print("Training {} | next_date: {}... ".format(name, next_date))
        clf = GridSearchCV(model, parameters)
        clf.fit(X_train, y_train)
        
        # Make predictions on training set
        train_preds = clf.predict(X_train)
        test_preds = clf.predict(X_test)
        train_probs = clf.best_estimator_.predict_proba(X_train)[:, 0]
        test_probs = clf.best_estimator_.predict_proba(X_test)[:, 0]
        
        # Make meta features to train the meta model on
        meta_train.append(train_probs)
        meta_test.append(test_probs)
    
        # Keep track of the predictions
        training_history[name].append(train_preds)
        testing_history[name].extend(test_preds)
        testing_history_probs[name].extend(test_probs)
        
        # Remember the last model
        trained_models[name] = clf
    
    # Take transpose of meta features so that observations are rows
    meta_train = np.array(meta_train).T
    meta_test = np.array(meta_test).T
    
    # Create and train the meta model
    clf = GridSearchCV(XGBClassifier(), xgb_params)
    clf.fit(meta_train, y_train)
    
    # Make training and testing predictions
    train_preds = clf.predict(meta_train)
    test_preds = clf.predict(meta_test)

    # Keep track of the predictions
    training_history['meta'].append(train_preds)
    testing_history['meta'].extend(test_preds)